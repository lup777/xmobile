// fonts.h
#ifndef __SANS_RU_FONTS__
#define __SANS_RU_FONTS__

#include "../CTaskStack.h"
#include "pt-mono-bold-8x13.h"
#include "pt-mono-bold-english-8x13.h"

namespace Fonts {

  namespace Sans {
    namespace Ru {

      const unsigned char a[50] PROGMEM =
	{0xFF,0xFF,
	 0xFF,0xFF,
	 0xFF,0xFF,
	 0xFF,0xFF,
	 0xF8,0x1F,
	 0xE0,0x07,
	 0xC0,0x03,
	 0x87,0xE3,
	 0x8F,0xFB,
	 0x8F,0xFF,
	 0x80,0x1F,
	 0x80,0x07,
	 0x80,0x03,
	 0x8F,0xE1,
	 0x8F,0xF1,
	 0x87,0xF1,
	 0x83,0xE1,
	 0x88,0x03,
	 0x88,0x03,
	 0x8E,0x0F,
	 0xFF,0xFF,
	 0xFF,0xFF,
	 0xFF,0xFF,
	 0xFF,0xFF,
	 0xFF,0xFF};

      const unsigned char b[50] PROGMEM =
	{0xE0,0xFF,
	 0xE0,0x1F,
	 0xC0,0x07,
	 0xFE,0x07,
	 0xFF,0xC3,
	 0xFF,0xE1,
	 0xFF,0xE1,
	 0xF8,0x31,
	 0xE0,0x01,
	 0xC0,0x01,
	 0xC3,0xC1,
	 0x87,0xE1,
	 0x8F,0xF1,
	 0x8F,0xF1,
	 0x8F,0xF1,
	 0x8F,0xF1,
	 0x8F,0xF1,
	 0x8F,0xF1,
	 0x87,0xE3,
	 0xC3,0xC3,
	 0xC0,0x07,
	 0xE0,0x0F,
	 0xF8,0x1F,
	 0xFF,0xFF,
	 0xFF,0xFF};

      const unsigned char v[50] PROGMEM =
	{0xFF,0xFF,
	 0xFF,0xFF,
	 0xFF,0xFF,
	 0xFF,0xFF,
	 0xFC,0x03,
	 0xF0,0x03,
	 0xE0,0x03,
	 0xE1,0xE3,
	 0xE3,0xE3,
	 0xE3,0xE3,
	 0xE1,0xE3,
	 0xF0,0x03,
	 0xF8,0x03,
	 0xE0,0x03,
	 0xC3,0xE3,
	 0xC7,0xE3,
	 0xC3,0xE3,
	 0xC0,0x03,
	 0xE0,0x03,
	 0xF8,0x03,
	 0xFF,0xFF,
	 0xFF,0xFF,
	 0xFF,0xFF,
	 0xFF,0xFF,
	 0xFF,0xFF};      
      TaskStack::CImagePart
	image_part_a(a, 0,
		     TaskStack::CPoint(16, 126),
		     TaskStack::CSize(2, 25),
		     TaskStack::CSize(16, 25));

      TaskStack::CImagePart
	image_part_b(b, 1,
		     TaskStack::CPoint(14, 126),
		     TaskStack::CSize(2, 25),
		     TaskStack::CSize(16, 25));

      TaskStack::CImagePart
	image_part_v(v, 2,
		     TaskStack::CPoint(12, 126),
		     TaskStack::CSize(2, 25),
		     TaskStack::CSize(16, 25));

    }; //Ru
  }; //Sans

  namespace Terminus
  {
    namespace Ru
    {
      const unsigned char a[50] PROGMEM =
	{0xFF,0xFF,
	 0xFF,0xFF,
	 0xFF,0xFF,
	 0xFF,0xFF,
	 0xFF,0xFF,
	 0xFF,0xFF,
	 0xF0,0x03,
	 0xE0,0x03,
	 0xC3,0xFF,
	 0xC7,0xFF,
	 0xC7,0xFF,
	 0xC0,0x07,
	 0xC0,0x03,
	 0xC7,0xE1,
	 0xC7,0xF1,
	 0xC7,0xF1,
	 0xC7,0xF1,
	 0xC7,0xE1,
	 0xC0,0x03,
	 0xC0,0x07,
	 0xFF,0xFF,
	 0xFF,0xFF,
	 0xFF,0xFF,
	 0xFF,0xFF,
	 0xFF,0xFF};

      const unsigned char b[50] PROGMEM =
	{0xF0,0x07,
	 0xF0,0x03,
	 0xFF,0xE1,
	 0xFF,0xF1,
	 0xFF,0xF1,
	 0xFF,0xF1,
	 0xFF,0xF1,
	 0xF0,0x01,
	 0xE0,0x01,
	 0xC3,0xF1,
	 0xC7,0xF1,
	 0xC7,0xF1,
	 0xC7,0xF1,
	 0xC7,0xF1,
	 0xC7,0xF1,
	 0xC7,0xF1,
	 0xC7,0xF1,
	 0xC3,0xF1,
	 0xE0,0x01,
	 0xF0,0x01,
	 0xFF,0xFF,
	 0xFF,0xFF,
	 0xFF,0xFF,
	 0xFF,0xFF,
	 0xFF,0xFF};

      const unsigned char v[50] PROGMEM =
	{0xFC,0x03,
	 0xF8,0x01,
	 0xF0,0xF1,
	 0xF1,0xF1,
	 0xF1,0xF1,
	 0xF1,0xF1,
	 0xF1,0xF1,
	 0xF8,0xF1,
	 0xF8,0x01,
	 0xF0,0x01,
	 0xE3,0xF1,
	 0xC7,0xF1,
	 0xC7,0xF1,
	 0xC7,0xF1,
	 0xC7,0xF1,
	 0xC7,0xF1,
	 0xC7,0xF1,
	 0xC3,0xF1,
	 0xE0,0x01,
	 0xF0,0x01,
	 0xFF,0xFF,
	 0xFF,0xFF,
	 0xFF,0xFF,
	 0xFF,0xFF,
	 0xFF,0xFF};


      TaskStack::CImagePart
	image_part_a(a, 0,
		     TaskStack::CPoint(16, 126),
		     TaskStack::CSize(2, 25),
		     TaskStack::CSize(16, 25));

      TaskStack::CImagePart
	image_part_b(b, 0,
		     TaskStack::CPoint(14, 126),
		     TaskStack::CSize(2, 25),
		     TaskStack::CSize(16, 25));

      TaskStack::CImagePart
	image_part_v(v, 0,
		     TaskStack::CPoint(12, 126),
		     TaskStack::CSize(2, 25),
		     TaskStack::CSize(16, 25));


    }// Ru
  } //Terminus

  namespace Nimbus
  {
    namespace Ru
    {

      const unsigned char a[46] PROGMEM =
	{0xFF,0xFF,
	 0xFF,0xFF,
	 0xFF,0xFF,
	 0xFF,0xFF,
	 0xFF,0xFF,
	 0xFF,0xFF,
	 0xFC,0x1F,
	 0xFB,0xEF,
	 0xF7,0xFF,
	 0xF7,0xFF,
	 0xF0,0x1F,
	 0xF3,0xE7,
	 0xF7,0xF3,
	 0xF7,0xFB,
	 0xF3,0xFB,
	 0xF4,0xF7,
	 0xC6,0x0F,
	 0xFF,0xFF,
	 0xFF,0xFF,
	 0xFF,0xFF,
	 0xFF,0xFF,
	 0xFF,0xFF,
	 0xFF,0xFF};

      const unsigned char b[46] PROGMEM =
	{0xFF,0xFF,
	 0xEF,0xFF,
	 0xEF,0xFF,
	 0xE0,0x3F,
	 0xFF,0xCF,
	 0xFF,0xF7,
	 0xFF,0xF7,
	 0xFC,0x1B,
	 0xF3,0xC3,
	 0xE7,0xF3,
	 0xCF,0xF3,
	 0xDF,0xFB,
	 0xDF,0xFB,
	 0xDF,0xFB,
	 0xCF,0xF7,
	 0xE7,0xE7,
	 0xF3,0xCF,
	 0xFC,0x3F,
	 0xFF,0xFF,
	 0xFF,0xFF,
	 0xFF,0xFF,
	 0xFF,0xFF,
	 0xFF,0xFF};

      const unsigned char v[46] PROGMEM =
	{0xFF,0xFF,
	 0xFF,0xFF,
	 0xFF,0xFF,
	 0xFF,0xFF,
	 0xFF,0xFF,
	 0xFF,0xFF,
	 0xF8,0x07,
	 0xF3,0xDF,
	 0xF7,0xDF,
	 0xF7,0xDF,
	 0xF3,0xDF,
	 0xF8,0x1F,
	 0xF7,0xDF,
	 0xEF,0xDF,
	 0xEF,0xDF,
	 0xE7,0xDF,
	 0xF0,0x07,
	 0xFF,0xFF,
	 0xFF,0xFF,
	 0xFF,0xFF,
	 0xFF,0xFF,
	 0xFF,0xFF,
	 0xFF,0xFF};

      const unsigned char f[46] PROGMEM =
	{0xFF,0xFF,
	 0xFF,0xFF,
	 0xFF,0xFF,
	 0xFF,0x1F,
	 0xFF,0x7F,
	 0xFF,0x7F,
	 0xFF,0x7F,
	 0xE0,0x07,
	 0xCF,0x73,
	 0xBF,0x7D,
	 0x3F,0x7C,
	 0x7F,0x7E,
	 0x7F,0x7E,
	 0x7F,0x7E,
	 0x3F,0x7C,
	 0xBF,0x7D,
	 0xCF,0x73,
	 0xE0,0x07,
	 0xFF,0x7F,
	 0xFF,0x7F,
	 0xFF,0x7F,
	 0xFF,0x7F,
	 0xFC,0x1F};

      const unsigned char y[46] PROGMEM =
	{0xFF,0xFF,
	 0xFF,0xFF,
	 0xFF,0xFF,
	 0xFF,0xFF,
	 0xFF,0xFF,
	 0xFF,0xFF,
	 0xFF,0xFF,
	 0x87,0xC3,
	 0xDF,0xF7,
	 0xEF,0xEF,
	 0xEF,0xEF,
	 0xF7,0xDF,
	 0xF7,0xDF,
	 0xFB,0xBF,
	 0xFB,0xBF,
	 0xFD,0x7F,
	 0xFC,0x7F,
	 0xFE,0xFF,
	 0xFE,0xFF,
	 0xFF,0x7F,
	 0xFF,0x7F,
	 0xFF,0xBF,
	 0xFC,0x03};

      TaskStack::CImagePart
	image_part_a(a, 0,
		     TaskStack::CPoint(20, 126),
		     TaskStack::CSize(2, 23),
		     TaskStack::CSize(16, 23));

      TaskStack::CImagePart
	image_part_b(b, 1,
		     TaskStack::CPoint(18, 126),
		     TaskStack::CSize(2, 23),
		     TaskStack::CSize(16, 23));

      TaskStack::CImagePart
	image_part_v(v, 2,
		     TaskStack::CPoint(16, 126),
		     TaskStack::CSize(2, 23),
		     TaskStack::CSize(16, 23));

      TaskStack::CImagePart
	image_part_f(f, 3,
		     TaskStack::CPoint(14, 126),
		     TaskStack::CSize(2, 23),
		     TaskStack::CSize(16, 23));

      TaskStack::CImagePart
	image_part_y(y, 4,
		     TaskStack::CPoint(12, 126),
		     TaskStack::CSize(2, 23),
		     TaskStack::CSize(16, 23));
    } //Ru
  } //Nimbus

  namespace Pt {
    namespace Ru {
      const unsigned char a[46] PROGMEM =
	{0xFF,0xFF,
	 0xFF,0xFF,
	 0xFF,0xFF,
	 0xFF,0xFF,
	 0xFF,0xFF,
	 0xFC,0x1F,
	 0xF8,0x07,
	 0xF1,0xE7,
	 0xF3,0xFF,
	 0xF3,0xFF,
	 0xF0,0x0F,
	 0xF0,0x07,
	 0xF3,0xE3,
	 0xF3,0xF3,
	 0xF1,0xF3,
	 0xF0,0xE3,
	 0xC2,0x07,
	 0xC3,0x0F,
	 0xFF,0xFF,
	 0xFF,0xFF,
	 0xFF,0xFF,
	 0xFF,0xFF,
	 0xFF,0xFF};

      const unsigned char b[46] PROGMEM =
	{0xEF,0xFF,
	 0xC0,0x3F,
	 0xE0,0x1F,
	 0xFF,0xCF,
	 0xFF,0xE7,
	 0xF0,0x67,
	 0xE0,0x17,
	 0xC7,0xC7,
	 0xCF,0xE3,
	 0xCF,0xE3,
	 0x8F,0xE3,
	 0x8F,0xE3,
	 0xCF,0xE7,
	 0xCF,0xE7,
	 0xCF,0xE7,
	 0xE7,0x8F,
	 0xE0,0x0F,
	 0xF8,0x3F,
	 0xFF,0xFF,
	 0xFF,0xFF,
	 0xFF,0xFF,
	 0xFF,0xFF,
	 0xFF,0xFF};

      const unsigned char ee[46] PROGMEM =
	{0xF3,0x9F,
	 0xE3,0x8F,
	 0xF3,0x9F,
	 0xFF,0xFF,
	 0xFF,0xFF,
	 0xF8,0x3F,
	 0xE0,0x1F,
	 0xC7,0xCF,
	 0xCF,0xE7,
	 0xCF,0xE7,
	 0xC0,0x07,
	 0xC0,0x07,
	 0xFF,0xE7,
	 0xFF,0xE7,
	 0xFF,0xE7,
	 0xCF,0x8F,
	 0xC0,0x0F,
	 0xF0,0x3F,
	 0xFF,0xFF,
	 0xFF,0xFF,
	 0xFF,0xFF,
	 0xFF,0xFF,
	 0xFF,0xFF};

      const unsigned char f[46] PROGMEM =
	{0xFE,0x3F,
	 0xFE,0x3F,
	 0xFE,0xFF,
	 0xFE,0xFF,
	 0xFE,0xFF,
	 0xE0,0x0F,
	 0xC0,0x07,
	 0x8E,0xE3,
	 0x9E,0xF3,
	 0x9E,0xF3,
	 0x9E,0xF3,
	 0x9E,0xF3,
	 0x9E,0xF3,
	 0x9E,0xF3,
	 0x9E,0xF3,
	 0x8E,0xE3,
	 0xC0,0x07,
	 0xE0,0x0F,
	 0xFE,0xFF,
	 0xFE,0xFF,
	 0xFE,0xFF,
	 0xFE,0xFF,
	 0xFE,0xFF};

      const unsigned char shb[46] PROGMEM =
	{0xFF,0xFF,
	 0xFF,0xFF,
	 0xFF,0xFF,
	 0xFF,0xFF,
	 0xFF,0xFF,
	 0xE7,0x73,
	 0xE7,0x73,
	 0xE7,0x73,
	 0xE7,0x73,
	 0xE7,0x73,
	 0xE7,0x73,
	 0xE7,0x73,
	 0xE7,0x73,
	 0xE7,0x73,
	 0xE7,0x73,
	 0xE7,0x73,
	 0x80,0x03,
	 0x80,0x03,
	 0x9F,0xFF,
	 0x9F,0xFF,
	 0x9F,0xFF,
	 0xFF,0xFF,
	 0xFF,0xFF};

      const unsigned char v[46] PROGMEM =
	{0xFF,0xFF,
	 0xFF,0xFF,
	 0xFF,0xFF,
	 0xFF,0xFF,
	 0xFF,0xFF,
	 0xF8,0x07,
	 0xF0,0x07,
	 0xE3,0xE7,
	 0xE7,0xE7,
	 0xF7,0xE7,
	 0xF3,0xE7,
	 0xF8,0x07,
	 0xF0,0x07,
	 0xE7,0xE7,
	 0xE7,0xE7,
	 0xE7,0xE7,
	 0xE0,0x07,
	 0xF8,0x07,
	 0xFF,0xFF,
	 0xFF,0xFF,
	 0xFF,0xFF,
	 0xFF,0xFF,
	 0xFF,0xFF};

      const unsigned char y[46] PROGMEM =
	{0xFF,0xFF,
	 0xFF,0xFF,
	 0xFF,0xFF,
	 0xFF,0xFF,
	 0xFF,0xFF,
	 0x9F,0xE3,
	 0xCF,0xE7,
	 0xCF,0xE7,
	 0xCF,0xCF,
	 0xEF,0xCF,
	 0xE7,0x8F,
	 0xE7,0x9F,
	 0xE7,0x9F,
	 0xF3,0x3F,
	 0xF3,0x3F,
	 0xF2,0x3F,
	 0xF8,0x7F,
	 0xF8,0x7F,
	 0xF9,0xFF,
	 0xFD,0xFF,
	 0xFC,0xFF,
	 0xFE,0x0F,
	 0xFF,0x0F};

      TaskStack::CImagePart
	image_part_a(a, 1,
		     TaskStack::CPoint(14, 126),
		     TaskStack::CSize(2, 23),
		     TaskStack::CSize(16, 23));
      TaskStack::CImagePart
	image_part_b(b, 2,
		     TaskStack::CPoint(12, 126),
		     TaskStack::CSize(2, 23),
		     TaskStack::CSize(16, 23));
      TaskStack::CImagePart
	image_part_ee(ee, 3,
		      TaskStack::CPoint(10, 126),
		      TaskStack::CSize(2, 23),
		      TaskStack::CSize(16, 23));
      TaskStack::CImagePart
	image_part_f(f, 4,
		     TaskStack::CPoint(8, 126),
		     TaskStack::CSize(2, 23),
		     TaskStack::CSize(16, 23));
      TaskStack::CImagePart
	image_part_shb(shb, 5,
		       TaskStack::CPoint(6, 126),
		       TaskStack::CSize(2, 23),
		       TaskStack::CSize(16, 23));
      TaskStack::CImagePart
	image_part_v(v, 6,
		     TaskStack::CPoint(4, 126),
		     TaskStack::CSize(2, 23),
		     TaskStack::CSize(16, 23));
      TaskStack::CImagePart
	image_part_y(y, 7,
		     TaskStack::CPoint(2, 126),
		     TaskStack::CSize(2, 23),
		     TaskStack::CSize(16, 23));

    } //Ru

  } //Pt

  TaskStack::CImagePart GetFontImagepart(uint8_t code) {
    switch(code) {
      /*UTF-16
    case 0xB0D0: return &(Fonts::PtMonoBlod::Ru::ch22);//а
    case 0xB1D0: return &(Fonts::PtMonoBlod::Ru::ch24);//б
    case 0xB2D0: return &(Fonts::PtMonoBlod::Ru::ch56);//в
    case 0xB3D0: return &(Fonts::PtMonoBlod::Ru::ch31);//г
    case 0xB4D0: return &(Fonts::PtMonoBlod::Ru::ch27);//д
    case 0xB5D0: return &(Fonts::PtMonoBlod::Ru::ch28);//е
    case 0x91D1: return &(Fonts::PtMonoBlod::Ru::ch29);//ё
    case 0xB6D0: return &(Fonts::PtMonoBlod::Ru::ch32);//ж
    case 0xB7D0: return &(Fonts::PtMonoBlod::Ru::ch60);//з
    case 0xB8D0: return &(Fonts::PtMonoBlod::Ru::ch34);//и
    case 0xB9D0: return &(Fonts::PtMonoBlod::Ru::ch66);//й
    case 0xBAD0: return &(Fonts::PtMonoBlod::Ru::ch37);//к
    case 0xBBD0: return &(Fonts::PtMonoBlod::Ru::ch38);//л
    case 0xBCD0: return &(Fonts::PtMonoBlod::Ru::ch39);//м
    case 0xBDD0: return &(Fonts::PtMonoBlod::Ru::ch42);//н
    case 0xBED0: return &(Fonts::PtMonoBlod::Ru::ch43);//о
    case 0xBFD0: return &(Fonts::PtMonoBlod::Ru::ch44);//п
    case 0x80D1: return &(Fonts::PtMonoBlod::Ru::ch47);//р
    case 0x81D1: return &(Fonts::PtMonoBlod::Ru::ch26);//с
    case 0x82D1: return &(Fonts::PtMonoBlod::Ru::ch52);//т
    case 0x83D1: return &(Fonts::PtMonoBlod::Ru::ch59);//у
    case 0x84D1: return &(Fonts::PtMonoBlod::Ru::ch30);//ф
    case 0x85D1: return &(Fonts::PtMonoBlod::Ru::ch58);//х
    case 0x86D1: return &(Fonts::PtMonoBlod::Ru::ch54);//ц
    case 0x87D1: return &(Fonts::PtMonoBlod::Ru::ch44);//ч
    case 0x88D1: return &(Fonts::PtMonoBlod::Ru::ch48);//ш
    case 0x89D1: return &(Fonts::PtMonoBlod::Ru::ch49);//щ
    case 0x8AD1: return &(Fonts::PtMonoBlod::Ru::ch55);//ъ
    case 0x8BD1: return &(Fonts::PtMonoBlod::Ru::ch25);//ы
    case 0x8CD1: return &(Fonts::PtMonoBlod::Ru::ch40);//ь
    case 0x8DD1: return &(Fonts::PtMonoBlod::Ru::ch65);//э
    case 0x8ED1: return &(Fonts::PtMonoBlod::Ru::ch36);//ю
    case 0x8FD1: return &(Fonts::PtMonoBlod::Ru::ch35);//я

    //case   : return &(Fonts::PtMonoBlod::Ru::ch1);//!
    case 62  : return &(Fonts::PtMonoBlod::Ru::ch64);// >
    case 60  : return &(Fonts::PtMonoBlod::Ru::ch7);// <
    case 34  : return &(Fonts::PtMonoBlod::Ru::ch13);// "
    case 39  : return &(Fonts::PtMonoBlod::Ru::ch16);// '
    case 92  : return &(Fonts::PtMonoBlod::Ru::ch11);// \
      //case 0x5C  : return &(Fonts::PtMonoBlod::Ru::ch);// @
    case 91  : return &(Fonts::PtMonoBlod::Ru::ch19);// [
    case 93  : return &(Fonts::PtMonoBlod::Ru::ch20);// ]
    case 123  : return &(Fonts::PtMonoBlod::Ru::ch62);// {
    case 128  : return &(Fonts::PtMonoBlod::Ru::ch63);//	}
      //case 0x26  : return &(Fonts::PtMonoBlod::Ru::ch);// ^
    case 38  : return &(Fonts::PtMonoBlod::Ru::ch23);// &
    case 37  : return &(Fonts::PtMonoBlod::Ru::ch45);// %
    case 45  : return &(Fonts::PtMonoBlod::Ru::ch41);// -
    case 43  : return &(Fonts::PtMonoBlod::Ru::ch46);// +
    case 42  : return &(Fonts::PtMonoBlod::Ru::ch51);// *
    case 63  : return &(Fonts::PtMonoBlod::Ru::ch57);// ?
    case 44  : return &(Fonts::PtMonoBlod::Ru::ch61);// ,
      //case 0x2E  : return &(Fonts::PtMonoBlod::Ru::ch);// .
      */

      // KOI8_R
    case 0xC1: return (Fonts::PtMonoBlod::Ru::ch22);//а
    case 0xC2: return (Fonts::PtMonoBlod::Ru::ch24);//б
    case 0xD7: return (Fonts::PtMonoBlod::Ru::ch56);//в
    case 0xC7: return (Fonts::PtMonoBlod::Ru::ch31);//г
    case 0xC4: return (Fonts::PtMonoBlod::Ru::ch27);//д
    case 0xC5: return (Fonts::PtMonoBlod::Ru::ch28);//е
    case 0xA3: return (Fonts::PtMonoBlod::Ru::ch29);//ё
    case 0xD6: return (Fonts::PtMonoBlod::Ru::ch32);//ж
    case 0xDA: return (Fonts::PtMonoBlod::Ru::ch60);//з
    case 0xC9: return (Fonts::PtMonoBlod::Ru::ch34);//и
    case 0xCA: return (Fonts::PtMonoBlod::Ru::ch66);//й
    case 0xCB: return (Fonts::PtMonoBlod::Ru::ch37);//к
    case 0xCC: return (Fonts::PtMonoBlod::Ru::ch38);//л
    case 0xCD: return (Fonts::PtMonoBlod::Ru::ch39);//м
    case 0xCE: return (Fonts::PtMonoBlod::Ru::ch42);//н
    case 0xCF: return (Fonts::PtMonoBlod::Ru::ch43);//о
    case 0xD0: return (Fonts::PtMonoBlod::Ru::ch44);//п
    case 0xD2: return (Fonts::PtMonoBlod::Ru::ch47);//р
    case 0xD3: return (Fonts::PtMonoBlod::Ru::ch26);//с
    case 0xD4: return (Fonts::PtMonoBlod::Ru::ch52);//т
    case 0xD5: return (Fonts::PtMonoBlod::Ru::ch59);//у
    case 0xC6: return (Fonts::PtMonoBlod::Ru::ch30);//ф
    case 0xC8: return (Fonts::PtMonoBlod::Ru::ch58);//х
    case 0xC3: return (Fonts::PtMonoBlod::Ru::ch54);//ц
    case 0xDE: return (Fonts::PtMonoBlod::Ru::ch10);//ч
    case 0xDB: return (Fonts::PtMonoBlod::Ru::ch48);//ш
    case 0xDD: return (Fonts::PtMonoBlod::Ru::ch49);//щ
    case 0xDF: return (Fonts::PtMonoBlod::Ru::ch55);//ъ
    case 0xD9: return (Fonts::PtMonoBlod::Ru::ch25);//ы
    case 0xD8: return (Fonts::PtMonoBlod::Ru::ch40);//ь
    case 0xDC: return (Fonts::PtMonoBlod::Ru::ch65);//э
    case 0xC0: return (Fonts::PtMonoBlod::Ru::ch36);//ю
    case 0xD1: return (Fonts::PtMonoBlod::Ru::ch35);//я
    case 0x20: return (Fonts::PtMonoBlod::Ru::ch67);// space
    case 0x2E: return (Fonts::PtMonoBlod::Ru::ch68);// dot
    case 0x2C: return (Fonts::PtMonoBlod::Ru::ch61);//,
    case 0x31: return (Fonts::PtMonoBlod::Ru::ch5);//1
    case 0x32: return (Fonts::PtMonoBlod::Ru::ch6);//2
    case 0x33: return (Fonts::PtMonoBlod::Ru::ch8);//3
    case 0x34: return (Fonts::PtMonoBlod::Ru::ch9);//4
    case 0x35: return (Fonts::PtMonoBlod::Ru::ch12);//5
    case 0x36: return (Fonts::PtMonoBlod::Ru::ch14);//6
    case 0x37: return (Fonts::PtMonoBlod::Ru::ch15);//7
    case 0x38: return (Fonts::PtMonoBlod::Ru::ch17);//8
    case 0x39: return (Fonts::PtMonoBlod::Ru::ch18);//9
    case 0x30: return (Fonts::PtMonoBlod::Ru::ch69);//0 
    case 0x21: return (Fonts::PtMonoBlod::Ru::ch1);//!
    case 0x3A: return (Fonts::PtMonoBlod::Ru::ch70);//:
    case 0x29: return (Fonts::PtMonoBlod::Ru::ch4);//)

    case 'a': return (Fonts::PtMonoBlod::En::ch1);
    case 'b': return (Fonts::PtMonoBlod::En::ch2);
    case 'c': return (Fonts::PtMonoBlod::En::ch3);
    case 'd': return (Fonts::PtMonoBlod::En::ch4);
    case 'e': return (Fonts::PtMonoBlod::En::ch5);
    case 'f': return (Fonts::PtMonoBlod::En::ch6);
    case 'g': return (Fonts::PtMonoBlod::En::ch7);
    case 'h': return (Fonts::PtMonoBlod::En::ch8);
    case 'i': return (Fonts::PtMonoBlod::En::ch9);
    case 'j': return (Fonts::PtMonoBlod::En::ch10);
    case 'k': return (Fonts::PtMonoBlod::En::ch11);
    case 'l': return (Fonts::PtMonoBlod::En::ch12);
    case 'm': return (Fonts::PtMonoBlod::En::ch13);
    case 'n': return (Fonts::PtMonoBlod::En::ch14);
    case 'o': return (Fonts::PtMonoBlod::En::ch15);
    case 'p': return (Fonts::PtMonoBlod::En::ch16);
    case 'q': return (Fonts::PtMonoBlod::En::ch17);
    case 'r': return (Fonts::PtMonoBlod::En::ch18);
    case 's': return (Fonts::PtMonoBlod::En::ch19);
    case 't': return (Fonts::PtMonoBlod::En::ch20);
    case 'u': return (Fonts::PtMonoBlod::En::ch21);
    case 'v': return (Fonts::PtMonoBlod::En::ch22);
    case 'w': return (Fonts::PtMonoBlod::En::ch23);
    case 'x': return (Fonts::PtMonoBlod::En::ch24);
    case 'y': return (Fonts::PtMonoBlod::En::ch25);
    case 'z': return (Fonts::PtMonoBlod::En::ch26);


      
    default:
      Serial.println("default");
      Serial.print("char: ");
      Serial.println(code, HEX);
      return (Fonts::PtMonoBlod::Ru::ch53);
    } //switch(code)
  }
}; //Fonts


#endif
