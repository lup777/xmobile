   1               		.file	"heap_1.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   9               		.text
  10               	.Ltext0:
 179               	.global	pvPortMalloc
 181               	pvPortMalloc:
 182               		.stabd	46,0,0
   1:../../Source/portable/MemMang/heap_1.c **** /*
   2:../../Source/portable/MemMang/heap_1.c ****  * FreeRTOS Kernel V10.0.0
   3:../../Source/portable/MemMang/heap_1.c ****  * Copyright (C) 2017 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:../../Source/portable/MemMang/heap_1.c ****  *
   5:../../Source/portable/MemMang/heap_1.c ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:../../Source/portable/MemMang/heap_1.c ****  * this software and associated documentation files (the "Software"), to deal in
   7:../../Source/portable/MemMang/heap_1.c ****  * the Software without restriction, including without limitation the rights to
   8:../../Source/portable/MemMang/heap_1.c ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:../../Source/portable/MemMang/heap_1.c ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:../../Source/portable/MemMang/heap_1.c ****  * subject to the following conditions:
  11:../../Source/portable/MemMang/heap_1.c ****  *
  12:../../Source/portable/MemMang/heap_1.c ****  * The above copyright notice and this permission notice shall be included in all
  13:../../Source/portable/MemMang/heap_1.c ****  * copies or substantial portions of the Software. If you wish to use our Amazon
  14:../../Source/portable/MemMang/heap_1.c ****  * FreeRTOS name, please do so in a fair use way that does not cause confusion.
  15:../../Source/portable/MemMang/heap_1.c ****  *
  16:../../Source/portable/MemMang/heap_1.c ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  17:../../Source/portable/MemMang/heap_1.c ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  18:../../Source/portable/MemMang/heap_1.c ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  19:../../Source/portable/MemMang/heap_1.c ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  20:../../Source/portable/MemMang/heap_1.c ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  21:../../Source/portable/MemMang/heap_1.c ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  22:../../Source/portable/MemMang/heap_1.c ****  *
  23:../../Source/portable/MemMang/heap_1.c ****  * http://www.FreeRTOS.org
  24:../../Source/portable/MemMang/heap_1.c ****  * http://aws.amazon.com/freertos
  25:../../Source/portable/MemMang/heap_1.c ****  *
  26:../../Source/portable/MemMang/heap_1.c ****  * 1 tab == 4 spaces!
  27:../../Source/portable/MemMang/heap_1.c ****  */
  28:../../Source/portable/MemMang/heap_1.c **** 
  29:../../Source/portable/MemMang/heap_1.c **** 
  30:../../Source/portable/MemMang/heap_1.c **** /*
  31:../../Source/portable/MemMang/heap_1.c ****  * The simplest possible implementation of pvPortMalloc().  Note that this
  32:../../Source/portable/MemMang/heap_1.c ****  * implementation does NOT allow allocated memory to be freed again.
  33:../../Source/portable/MemMang/heap_1.c ****  *
  34:../../Source/portable/MemMang/heap_1.c ****  * See heap_2.c, heap_3.c and heap_4.c for alternative implementations, and the
  35:../../Source/portable/MemMang/heap_1.c ****  * memory management pages of http://www.FreeRTOS.org for more information.
  36:../../Source/portable/MemMang/heap_1.c ****  */
  37:../../Source/portable/MemMang/heap_1.c **** #include <stdlib.h>
  38:../../Source/portable/MemMang/heap_1.c **** 
  39:../../Source/portable/MemMang/heap_1.c **** /* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
  40:../../Source/portable/MemMang/heap_1.c **** all the API functions to use the MPU wrappers.  That should only be done when
  41:../../Source/portable/MemMang/heap_1.c **** task.h is included from an application file. */
  42:../../Source/portable/MemMang/heap_1.c **** #define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  43:../../Source/portable/MemMang/heap_1.c **** 
  44:../../Source/portable/MemMang/heap_1.c **** #include "FreeRTOS.h"
  45:../../Source/portable/MemMang/heap_1.c **** #include "task.h"
  46:../../Source/portable/MemMang/heap_1.c **** 
  47:../../Source/portable/MemMang/heap_1.c **** #undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  48:../../Source/portable/MemMang/heap_1.c **** 
  49:../../Source/portable/MemMang/heap_1.c **** #if( configSUPPORT_DYNAMIC_ALLOCATION == 0 )
  50:../../Source/portable/MemMang/heap_1.c **** 	#error This file must not be used if configSUPPORT_DYNAMIC_ALLOCATION is 0
  51:../../Source/portable/MemMang/heap_1.c **** #endif
  52:../../Source/portable/MemMang/heap_1.c **** 
  53:../../Source/portable/MemMang/heap_1.c **** /* A few bytes might be lost to byte aligning the heap start address. */
  54:../../Source/portable/MemMang/heap_1.c **** #define configADJUSTED_HEAP_SIZE	( configTOTAL_HEAP_SIZE - portBYTE_ALIGNMENT )
  55:../../Source/portable/MemMang/heap_1.c **** 
  56:../../Source/portable/MemMang/heap_1.c **** /* Allocate the memory for the heap. */
  57:../../Source/portable/MemMang/heap_1.c **** /* Allocate the memory for the heap. */
  58:../../Source/portable/MemMang/heap_1.c **** #if( configAPPLICATION_ALLOCATED_HEAP == 1 )
  59:../../Source/portable/MemMang/heap_1.c **** 	/* The application writer has already defined the array used for the RTOS
  60:../../Source/portable/MemMang/heap_1.c **** 	heap - probably so it can be placed in a special segment or address. */
  61:../../Source/portable/MemMang/heap_1.c **** 	extern uint8_t ucHeap[ configTOTAL_HEAP_SIZE ];
  62:../../Source/portable/MemMang/heap_1.c **** #else
  63:../../Source/portable/MemMang/heap_1.c **** 	static uint8_t ucHeap[ configTOTAL_HEAP_SIZE ];
  64:../../Source/portable/MemMang/heap_1.c **** #endif /* configAPPLICATION_ALLOCATED_HEAP */
  65:../../Source/portable/MemMang/heap_1.c **** 
  66:../../Source/portable/MemMang/heap_1.c **** /* Index into the ucHeap array. */
  67:../../Source/portable/MemMang/heap_1.c **** static size_t xNextFreeByte = ( size_t ) 0;
  68:../../Source/portable/MemMang/heap_1.c **** 
  69:../../Source/portable/MemMang/heap_1.c **** /*-----------------------------------------------------------*/
  70:../../Source/portable/MemMang/heap_1.c **** 
  71:../../Source/portable/MemMang/heap_1.c **** void *pvPortMalloc( size_t xWantedSize )
  72:../../Source/portable/MemMang/heap_1.c **** {
 184               	.LM0:
 185               	.LFBB1:
 186 0000 CF93      		push r28
 187 0002 DF93      		push r29
 188               	/* prologue: function */
 189               	/* frame size = 0 */
 190               	/* stack size = 2 */
 191               	.L__stack_usage = 2
 192 0004 EC01      		movw r28,r24
  73:../../Source/portable/MemMang/heap_1.c **** void *pvReturn = NULL;
  74:../../Source/portable/MemMang/heap_1.c **** static uint8_t *pucAlignedHeap = NULL;
  75:../../Source/portable/MemMang/heap_1.c **** 
  76:../../Source/portable/MemMang/heap_1.c **** 	/* Ensure that blocks are always aligned to the required number of bytes. */
  77:../../Source/portable/MemMang/heap_1.c **** 	#if( portBYTE_ALIGNMENT != 1 )
  78:../../Source/portable/MemMang/heap_1.c **** 	{
  79:../../Source/portable/MemMang/heap_1.c **** 		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
  80:../../Source/portable/MemMang/heap_1.c **** 		{
  81:../../Source/portable/MemMang/heap_1.c **** 			/* Byte alignment required. */
  82:../../Source/portable/MemMang/heap_1.c **** 			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
  83:../../Source/portable/MemMang/heap_1.c **** 		}
  84:../../Source/portable/MemMang/heap_1.c **** 	}
  85:../../Source/portable/MemMang/heap_1.c **** 	#endif
  86:../../Source/portable/MemMang/heap_1.c **** 
  87:../../Source/portable/MemMang/heap_1.c **** 	vTaskSuspendAll();
 194               	.LM1:
 195 0006 0E94 0000 		call vTaskSuspendAll
  88:../../Source/portable/MemMang/heap_1.c **** 	{
  89:../../Source/portable/MemMang/heap_1.c **** 		if( pucAlignedHeap == NULL )
 197               	.LM2:
 198 000a 8091 0000 		lds r24,pucAlignedHeap.1984
 199 000e 9091 0000 		lds r25,pucAlignedHeap.1984+1
 200 0012 892B      		or r24,r25
 201 0014 01F4      		brne .L2
  90:../../Source/portable/MemMang/heap_1.c **** 		{
  91:../../Source/portable/MemMang/heap_1.c **** 			/* Ensure the heap starts on a correctly aligned boundary. */
  92:../../Source/portable/MemMang/heap_1.c **** 			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & (
 203               	.LM3:
 204 0016 80E0      		ldi r24,lo8(ucHeap+1)
 205 0018 90E0      		ldi r25,hi8(ucHeap+1)
 206 001a 9093 0000 		sts pucAlignedHeap.1984+1,r25
 207 001e 8093 0000 		sts pucAlignedHeap.1984,r24
 208               	.L2:
  93:../../Source/portable/MemMang/heap_1.c **** 		}
  94:../../Source/portable/MemMang/heap_1.c **** 
  95:../../Source/portable/MemMang/heap_1.c **** 		/* Check there is enough room left for the allocation. */
  96:../../Source/portable/MemMang/heap_1.c **** 		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 210               	.LM4:
 211 0022 2091 0000 		lds r18,xNextFreeByte
 212 0026 3091 0000 		lds r19,xNextFreeByte+1
 213 002a CE01      		movw r24,r28
 214 002c 820F      		add r24,r18
 215 002e 931F      		adc r25,r19
 216 0030 8B3D      		cpi r24,-37
 217 0032 45E0      		ldi r20,5
 218 0034 9407      		cpc r25,r20
 219 0036 00F4      		brsh .L5
 221               	.LM5:
 222 0038 2817      		cp r18,r24
 223 003a 3907      		cpc r19,r25
 224 003c 00F4      		brsh .L5
  97:../../Source/portable/MemMang/heap_1.c **** 			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
  98:../../Source/portable/MemMang/heap_1.c **** 		{
  99:../../Source/portable/MemMang/heap_1.c **** 			/* Return the next free byte then increment the index past this
 100:../../Source/portable/MemMang/heap_1.c **** 			block. */
 101:../../Source/portable/MemMang/heap_1.c **** 			pvReturn = pucAlignedHeap + xNextFreeByte;
 226               	.LM6:
 227 003e C091 0000 		lds r28,pucAlignedHeap.1984
 228 0042 D091 0000 		lds r29,pucAlignedHeap.1984+1
 229 0046 C20F      		add r28,r18
 230 0048 D31F      		adc r29,r19
 102:../../Source/portable/MemMang/heap_1.c **** 			xNextFreeByte += xWantedSize;
 232               	.LM7:
 233 004a 9093 0000 		sts xNextFreeByte+1,r25
 234 004e 8093 0000 		sts xNextFreeByte,r24
 235 0052 00C0      		rjmp .L3
 236               	.L5:
  73:../../Source/portable/MemMang/heap_1.c **** static uint8_t *pucAlignedHeap = NULL;
 238               	.LM8:
 239 0054 C0E0      		ldi r28,0
 240 0056 D0E0      		ldi r29,0
 241               	.L3:
 103:../../Source/portable/MemMang/heap_1.c **** 		}
 104:../../Source/portable/MemMang/heap_1.c **** 
 105:../../Source/portable/MemMang/heap_1.c **** 		traceMALLOC( pvReturn, xWantedSize );
 106:../../Source/portable/MemMang/heap_1.c **** 	}
 107:../../Source/portable/MemMang/heap_1.c **** 	( void ) xTaskResumeAll();
 243               	.LM9:
 244 0058 0E94 0000 		call xTaskResumeAll
 108:../../Source/portable/MemMang/heap_1.c **** 
 109:../../Source/portable/MemMang/heap_1.c **** 	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
 110:../../Source/portable/MemMang/heap_1.c **** 	{
 111:../../Source/portable/MemMang/heap_1.c **** 		if( pvReturn == NULL )
 112:../../Source/portable/MemMang/heap_1.c **** 		{
 113:../../Source/portable/MemMang/heap_1.c **** 			extern void vApplicationMallocFailedHook( void );
 114:../../Source/portable/MemMang/heap_1.c **** 			vApplicationMallocFailedHook();
 115:../../Source/portable/MemMang/heap_1.c **** 		}
 116:../../Source/portable/MemMang/heap_1.c **** 	}
 117:../../Source/portable/MemMang/heap_1.c **** 	#endif
 118:../../Source/portable/MemMang/heap_1.c **** 
 119:../../Source/portable/MemMang/heap_1.c **** 	return pvReturn;
 120:../../Source/portable/MemMang/heap_1.c **** }
 246               	.LM10:
 247 005c CE01      		movw r24,r28
 248               	/* epilogue start */
 249 005e DF91      		pop r29
 250 0060 CF91      		pop r28
 251 0062 0895      		ret
 257               	.Lscope1:
 259               		.stabd	78,0,0
 262               	.global	vPortFree
 264               	vPortFree:
 265               		.stabd	46,0,0
 121:../../Source/portable/MemMang/heap_1.c **** /*-----------------------------------------------------------*/
 122:../../Source/portable/MemMang/heap_1.c **** 
 123:../../Source/portable/MemMang/heap_1.c **** void vPortFree( void *pv )
 124:../../Source/portable/MemMang/heap_1.c **** {
 267               	.LM11:
 268               	.LFBB2:
 269               	/* prologue: function */
 270               	/* frame size = 0 */
 271               	/* stack size = 0 */
 272               	.L__stack_usage = 0
 273 0064 0895      		ret
 275               	.Lscope2:
 277               		.stabd	78,0,0
 279               	.global	vPortInitialiseBlocks
 281               	vPortInitialiseBlocks:
 282               		.stabd	46,0,0
 125:../../Source/portable/MemMang/heap_1.c **** 	/* Memory cannot be freed using this scheme.  See heap_2.c, heap_3.c and
 126:../../Source/portable/MemMang/heap_1.c **** 	heap_4.c for alternative implementations, and the memory management pages of
 127:../../Source/portable/MemMang/heap_1.c **** 	http://www.FreeRTOS.org for more information. */
 128:../../Source/portable/MemMang/heap_1.c **** 	( void ) pv;
 129:../../Source/portable/MemMang/heap_1.c **** 
 130:../../Source/portable/MemMang/heap_1.c **** 	/* Force an assert as it is invalid to call this function. */
 131:../../Source/portable/MemMang/heap_1.c **** 	configASSERT( pv == NULL );
 132:../../Source/portable/MemMang/heap_1.c **** }
 133:../../Source/portable/MemMang/heap_1.c **** /*-----------------------------------------------------------*/
 134:../../Source/portable/MemMang/heap_1.c **** 
 135:../../Source/portable/MemMang/heap_1.c **** void vPortInitialiseBlocks( void )
 136:../../Source/portable/MemMang/heap_1.c **** {
 284               	.LM12:
 285               	.LFBB3:
 286               	/* prologue: function */
 287               	/* frame size = 0 */
 288               	/* stack size = 0 */
 289               	.L__stack_usage = 0
 137:../../Source/portable/MemMang/heap_1.c **** 	/* Only required when static memory is not cleared. */
 138:../../Source/portable/MemMang/heap_1.c **** 	xNextFreeByte = ( size_t ) 0;
 291               	.LM13:
 292 0066 1092 0000 		sts xNextFreeByte+1,__zero_reg__
 293 006a 1092 0000 		sts xNextFreeByte,__zero_reg__
 294 006e 0895      		ret
 296               	.Lscope3:
 298               		.stabd	78,0,0
 300               	.global	xPortGetFreeHeapSize
 302               	xPortGetFreeHeapSize:
 303               		.stabd	46,0,0
 139:../../Source/portable/MemMang/heap_1.c **** }
 140:../../Source/portable/MemMang/heap_1.c **** /*-----------------------------------------------------------*/
 141:../../Source/portable/MemMang/heap_1.c **** 
 142:../../Source/portable/MemMang/heap_1.c **** size_t xPortGetFreeHeapSize( void )
 143:../../Source/portable/MemMang/heap_1.c **** {
 305               	.LM14:
 306               	.LFBB4:
 307               	/* prologue: function */
 308               	/* frame size = 0 */
 309               	/* stack size = 0 */
 310               	.L__stack_usage = 0
 144:../../Source/portable/MemMang/heap_1.c **** 	return ( configADJUSTED_HEAP_SIZE - xNextFreeByte );
 312               	.LM15:
 313 0070 2091 0000 		lds r18,xNextFreeByte
 314 0074 3091 0000 		lds r19,xNextFreeByte+1
 145:../../Source/portable/MemMang/heap_1.c **** }
 316               	.LM16:
 317 0078 8BED      		ldi r24,lo8(-37)
 318 007a 95E0      		ldi r25,lo8(5)
 319 007c 821B      		sub r24,r18
 320 007e 930B      		sbc r25,r19
 321 0080 0895      		ret
 323               	.Lscope4:
 325               		.stabd	78,0,0
 326               		.local	pucAlignedHeap.1984
 327               		.comm	pucAlignedHeap.1984,2,1
 328               		.local	xNextFreeByte
 329               		.comm	xNextFreeByte,2,1
 330               		.local	ucHeap
 331               		.comm	ucHeap,1500,1
 335               	.Letext0:
 336               		.ident	"GCC: (GNU) 4.9.2"
 337               	.global __do_clear_bss
DEFINED SYMBOLS
                            *ABS*:0000000000000000 heap_1.c
     /tmp/ccX5HXOU.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccX5HXOU.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccX5HXOU.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccX5HXOU.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccX5HXOU.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccX5HXOU.s:181    .text:0000000000000000 pvPortMalloc
                             .bss:0000000000000000 pucAlignedHeap.1984
     /tmp/ccX5HXOU.s:329    .bss:0000000000000004 ucHeap
     /tmp/ccX5HXOU.s:327    .bss:0000000000000002 xNextFreeByte
     /tmp/ccX5HXOU.s:264    .text:0000000000000064 vPortFree
     /tmp/ccX5HXOU.s:281    .text:0000000000000066 vPortInitialiseBlocks
     /tmp/ccX5HXOU.s:302    .text:0000000000000070 xPortGetFreeHeapSize

UNDEFINED SYMBOLS
vTaskSuspendAll
xTaskResumeAll
__do_clear_bss
