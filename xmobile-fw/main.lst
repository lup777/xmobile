   1               		.file	"main.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   9               		.text
  10               	.Ltext0:
 199               	vErrorChecks:
 200               		.stabd	46,0,0
   1:main.c        **** /*
   2:main.c        ****  * FreeRTOS Kernel V10.0.0
   3:main.c        ****  * Copyright (C) 2017 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:main.c        ****  *
   5:main.c        ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:main.c        ****  * this software and associated documentation files (the "Software"), to deal in
   7:main.c        ****  * the Software without restriction, including without limitation the rights to
   8:main.c        ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:main.c        ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:main.c        ****  * subject to the following conditions:
  11:main.c        ****  *
  12:main.c        ****  * The above copyright notice and this permission notice shall be included in all
  13:main.c        ****  * copies or substantial portions of the Software. If you wish to use our Amazon
  14:main.c        ****  * FreeRTOS name, please do so in a fair use way that does not cause confusion.
  15:main.c        ****  *
  16:main.c        ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  17:main.c        ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  18:main.c        ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  19:main.c        ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  20:main.c        ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  21:main.c        ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  22:main.c        ****  *
  23:main.c        ****  * http://www.FreeRTOS.org
  24:main.c        ****  * http://aws.amazon.com/freertos
  25:main.c        ****  *
  26:main.c        ****  * 1 tab == 4 spaces!
  27:main.c        ****  */
  28:main.c        **** 
  29:main.c        **** /*
  30:main.c        ****  * Creates all the demo application tasks, then starts the scheduler.  The WEB
  31:main.c        ****  * documentation provides more details of the demo application tasks.
  32:main.c        ****  *
  33:main.c        ****  * Main. c also creates a task called "Check".  This only executes every three
  34:main.c        ****  * seconds but has the highest priority so is guaranteed to get processor time.
  35:main.c        ****  * Its main function is to check that all the other tasks are still operational.
  36:main.c        ****  * Each task that does not flash an LED maintains a unique count that is
  37:main.c        ****  * incremented each time the task successfully completes its function.  Should
  38:main.c        ****  * any error occur within such a task the count is permanently halted.  The
  39:main.c        ****  * check task inspects the count of each task to ensure it has changed since
  40:main.c        ****  * the last time the check task executed.  If all the count variables have
  41:main.c        ****  * changed all the tasks are still executing error free, and the check task
  42:main.c        ****  * toggles an LED.  Should any task contain an error at any time the LED toggle
  43:main.c        ****  * will stop.
  44:main.c        ****  *
  45:main.c        ****  * The LED flash and communications test tasks do not maintain a count.
  46:main.c        ****  */
  47:main.c        **** 
  48:main.c        **** /*
  49:main.c        **** Changes from V1.2.0
  50:main.c        **** 
  51:main.c        **** 	+ Changed the baud rate for the serial test from 19200 to 57600.
  52:main.c        **** 
  53:main.c        **** Changes from V1.2.3
  54:main.c        **** 
  55:main.c        **** 	+ The integer and comtest tasks are now used when the cooperative scheduler
  56:main.c        **** 	  is being used.  Previously they were only used with the preemptive
  57:main.c        **** 	  scheduler.
  58:main.c        **** 
  59:main.c        **** Changes from V1.2.5
  60:main.c        **** 
  61:main.c        **** 	+ Set the baud rate to 38400.  This has a smaller error percentage with an
  62:main.c        **** 	  8MHz clock (according to the manual).
  63:main.c        **** 
  64:main.c        **** Changes from V2.0.0
  65:main.c        **** 
  66:main.c        **** 	+ Delay periods are now specified using variables and constants of
  67:main.c        **** 	  TickType_t rather than unsigned long.
  68:main.c        **** 
  69:main.c        **** Changes from V2.6.1
  70:main.c        **** 
  71:main.c        **** 	+ The IAR and WinAVR AVR ports are now maintained separately.
  72:main.c        **** 
  73:main.c        **** Changes from V4.0.5
  74:main.c        **** 
  75:main.c        **** 	+ Modified to demonstrate the use of co-routines.
  76:main.c        **** 
  77:main.c        **** */
  78:main.c        **** 
  79:main.c        **** #include <stdlib.h>
  80:main.c        **** #include <string.h>
  81:main.c        **** 
  82:main.c        **** #ifdef GCC_MEGA_AVR
  83:main.c        **** 	/* EEPROM routines used only with the WinAVR compiler. */
  84:main.c        **** 	#include <avr/eeprom.h>
  85:main.c        **** #endif
  86:main.c        **** 
  87:main.c        **** /* Scheduler include files. */
  88:main.c        **** #include "FreeRTOS.h"
  89:main.c        **** #include "task.h"
  90:main.c        **** #include "croutine.h"
  91:main.c        **** 
  92:main.c        **** /* Demo file headers. */
  93:main.c        **** #include "PollQ.h"
  94:main.c        **** #include "integer.h"
  95:main.c        **** #include "serial.h"
  96:main.c        **** #include "comtest.h"
  97:main.c        **** #include "crflash.h"
  98:main.c        **** #include "print.h"
  99:main.c        **** #include "partest.h"
 100:main.c        **** #include "regtest.h"
 101:main.c        **** 
 102:main.c        **** /* Priority definitions for most of the tasks in the demo application.  Some
 103:main.c        **** tasks just use the idle priority. */
 104:main.c        **** #define mainLED_TASK_PRIORITY			( tskIDLE_PRIORITY + 1 )
 105:main.c        **** #define mainCOM_TEST_PRIORITY			( tskIDLE_PRIORITY + 2 )
 106:main.c        **** #define mainQUEUE_POLL_PRIORITY			( tskIDLE_PRIORITY + 2 )
 107:main.c        **** #define mainCHECK_TASK_PRIORITY			( tskIDLE_PRIORITY + 3 )
 108:main.c        **** 
 109:main.c        **** /* Baud rate used by the serial port tasks. */
 110:main.c        **** #define mainCOM_TEST_BAUD_RATE			( ( unsigned long ) 38400 )
 111:main.c        **** 
 112:main.c        **** /* LED used by the serial port tasks.  This is toggled on each character Tx,
 113:main.c        **** and mainCOM_TEST_LED + 1 is toggles on each character Rx. */
 114:main.c        **** #define mainCOM_TEST_LED				( 5 ) //( 4 )
 115:main.c        **** 
 116:main.c        **** /* LED that is toggled by the check task.  The check task periodically checks
 117:main.c        **** that all the other tasks are operating without error.  If no errors are found
 118:main.c        **** the LED is toggled.  If an error is found at any time the LED is never toggles
 119:main.c        **** again. */
 120:main.c        **** #define mainCHECK_TASK_LED				( 5 ) //( 7 )
 121:main.c        **** 
 122:main.c        **** /* The period between executions of the check task. */
 123:main.c        **** #define mainCHECK_PERIOD				( ( TickType_t ) 3000 / portTICK_PERIOD_MS  )
 124:main.c        **** 
 125:main.c        **** /* An address in the EEPROM used to count resets.  This is used to check that
 126:main.c        **** the demo application is not unexpectedly resetting. */
 127:main.c        **** #define mainRESET_COUNT_ADDRESS			( ( void * ) 0x50 )
 128:main.c        **** 
 129:main.c        **** /* The number of coroutines to create. */
 130:main.c        **** #define mainNUM_FLASH_COROUTINES		( 3 )
 131:main.c        **** 
 132:main.c        **** /*
 133:main.c        ****  * The task function for the "Check" task.
 134:main.c        ****  */
 135:main.c        **** static void vErrorChecks( void *pvParameters );
 136:main.c        **** 
 137:main.c        **** /*
 138:main.c        ****  * Checks the unique counts of other tasks to ensure they are still operational.
 139:main.c        ****  * Flashes an LED if everything is okay.
 140:main.c        ****  */
 141:main.c        **** static void prvCheckOtherTasksAreStillRunning( void );
 142:main.c        **** 
 143:main.c        **** /*
 144:main.c        ****  * Called on boot to increment a count stored in the EEPROM.  This is used to
 145:main.c        ****  * ensure the CPU does not reset unexpectedly.
 146:main.c        ****  */
 147:main.c        **** static void prvIncrementResetCount( void );
 148:main.c        **** 
 149:main.c        **** /*
 150:main.c        ****  * The idle hook is used to scheduler co-routines.
 151:main.c        ****  */
 152:main.c        **** void vApplicationIdleHook( void );
 153:main.c        **** 
 154:main.c        **** /*-----------------------------------------------------------*/
 155:main.c        **** 
 156:main.c        **** short main( void )
 157:main.c        **** {
 158:main.c        **** 	prvIncrementResetCount();
 159:main.c        **** 
 160:main.c        **** 	/* Setup the LED's for output. */
 161:main.c        **** 	vParTestInitialise();
 162:main.c        **** 
 163:main.c        **** 	/* Create the standard demo tasks. */
 164:main.c        **** 	vStartIntegerMathTasks( tskIDLE_PRIORITY );
 165:main.c        **** 	vAltStartComTestTasks( mainCOM_TEST_PRIORITY, mainCOM_TEST_BAUD_RATE, mainCOM_TEST_LED );
 166:main.c        **** 	vStartPolledQueueTasks( mainQUEUE_POLL_PRIORITY );
 167:main.c        **** 	vStartRegTestTasks();
 168:main.c        **** 
 169:main.c        **** 	/* Create the tasks defined within this file. */
 170:main.c        **** 	xTaskCreate( vErrorChecks, "Check", configMINIMAL_STACK_SIZE, NULL, mainCHECK_TASK_PRIORITY, NULL 
 171:main.c        **** 
 172:main.c        **** 	/* Create the co-routines that flash the LED's. */
 173:main.c        **** 	vStartFlashCoRoutines( mainNUM_FLASH_COROUTINES );
 174:main.c        **** 
 175:main.c        **** 	/* In this port, to use preemptive scheduler define configUSE_PREEMPTION
 176:main.c        **** 	as 1 in portmacro.h.  To use the cooperative scheduler define
 177:main.c        **** 	configUSE_PREEMPTION as 0. */
 178:main.c        **** 	vTaskStartScheduler();
 179:main.c        **** 
 180:main.c        **** 	return 0;
 181:main.c        **** }
 182:main.c        **** /*-----------------------------------------------------------*/
 183:main.c        **** 
 184:main.c        **** static void vErrorChecks( void *pvParameters )
 185:main.c        **** {
 202               	.LM0:
 203               	.LFBB1:
 204               	/* prologue: function */
 205               	/* frame size = 0 */
 206               	/* stack size = 0 */
 207               	.L__stack_usage = 0
 208               	.LBB4:
 209               	.LBB5:
 186:main.c        **** static volatile unsigned long ulDummyVariable = 3UL;
 187:main.c        **** 
 188:main.c        **** 	/* The parameters are not used. */
 189:main.c        **** 	( void ) pvParameters;
 190:main.c        **** 
 191:main.c        **** 	/* Cycle for ever, delaying then checking all the other tasks are still
 192:main.c        **** 	operating without error. */
 193:main.c        **** 	for( ;; )
 194:main.c        **** 	{
 195:main.c        **** 		vTaskDelay( mainCHECK_PERIOD );
 196:main.c        **** 
 197:main.c        **** 		/* Perform a bit of 32bit maths to ensure the registers used by the
 198:main.c        **** 		integer tasks get some exercise. The result here is not important -
 199:main.c        **** 		see the demo application documentation for more info. */
 200:main.c        **** 		ulDummyVariable *= 3;
 201:main.c        **** 
 202:main.c        **** 		prvCheckOtherTasksAreStillRunning();
 203:main.c        **** 	}
 204:main.c        **** }
 205:main.c        **** /*-----------------------------------------------------------*/
 206:main.c        **** 
 207:main.c        **** static void prvCheckOtherTasksAreStillRunning( void )
 208:main.c        **** {
 209:main.c        **** static portBASE_TYPE xErrorHasOccurred = pdFALSE;
 210:main.c        **** 
 211:main.c        **** 	if( xAreIntegerMathsTaskStillRunning() != pdTRUE )
 212:main.c        **** 	{
 213:main.c        **** 		xErrorHasOccurred = pdTRUE;
 211               	.LM1:
 212 0000 C1E0      		ldi r28,lo8(1)
 213               	.L6:
 214               	.LBE5:
 215               	.LBE4:
 195:main.c        **** 
 217               	.LM2:
 218 0002 88EB      		ldi r24,lo8(-72)
 219 0004 9BE0      		ldi r25,lo8(11)
 220 0006 0E94 0000 		call vTaskDelay
 200:main.c        **** 
 222               	.LM3:
 223 000a 2091 0000 		lds r18,ulDummyVariable.2296
 224 000e 3091 0000 		lds r19,ulDummyVariable.2296+1
 225 0012 4091 0000 		lds r20,ulDummyVariable.2296+2
 226 0016 5091 0000 		lds r21,ulDummyVariable.2296+3
 227 001a A3E0      		ldi r26,lo8(3)
 228 001c B0E0      		ldi r27,0
 229 001e 0E94 0000 		call __muluhisi3
 230 0022 6093 0000 		sts ulDummyVariable.2296,r22
 231 0026 7093 0000 		sts ulDummyVariable.2296+1,r23
 232 002a 8093 0000 		sts ulDummyVariable.2296+2,r24
 233 002e 9093 0000 		sts ulDummyVariable.2296+3,r25
 234               	.LBB7:
 235               	.LBB6:
 211:main.c        **** 	{
 237               	.LM4:
 238 0032 0E94 0000 		call xAreIntegerMathsTaskStillRunning
 239 0036 8130      		cpi r24,lo8(1)
 240 0038 01F0      		breq .L2
 242               	.LM5:
 243 003a C093 0000 		sts xErrorHasOccurred.2301,r28
 244               	.L2:
 214:main.c        **** 	}
 215:main.c        **** 
 216:main.c        **** 	if( xAreComTestTasksStillRunning() != pdTRUE )
 246               	.LM6:
 247 003e 0E94 0000 		call xAreComTestTasksStillRunning
 248 0042 8130      		cpi r24,lo8(1)
 249 0044 01F0      		breq .L3
 217:main.c        **** 	{
 218:main.c        **** 		xErrorHasOccurred = pdTRUE;
 251               	.LM7:
 252 0046 C093 0000 		sts xErrorHasOccurred.2301,r28
 253               	.L3:
 219:main.c        **** 	}
 220:main.c        **** 
 221:main.c        **** 	if( xArePollingQueuesStillRunning() != pdTRUE )
 255               	.LM8:
 256 004a 0E94 0000 		call xArePollingQueuesStillRunning
 257 004e 8130      		cpi r24,lo8(1)
 258 0050 01F0      		breq .L4
 222:main.c        **** 	{
 223:main.c        **** 		xErrorHasOccurred = pdTRUE;
 260               	.LM9:
 261 0052 C093 0000 		sts xErrorHasOccurred.2301,r28
 262               	.L4:
 224:main.c        **** 	}
 225:main.c        **** 
 226:main.c        **** 	if( xAreRegTestTasksStillRunning() != pdTRUE )
 264               	.LM10:
 265 0056 0E94 0000 		call xAreRegTestTasksStillRunning
 266 005a 8130      		cpi r24,lo8(1)
 267 005c 01F0      		breq .L5
 227:main.c        **** 	{
 228:main.c        **** 		xErrorHasOccurred = pdTRUE;
 269               	.LM11:
 270 005e C093 0000 		sts xErrorHasOccurred.2301,r28
 271               	.L5:
 229:main.c        **** 	}
 230:main.c        **** 
 231:main.c        **** 	if( xErrorHasOccurred == pdFALSE )
 273               	.LM12:
 274 0062 8091 0000 		lds r24,xErrorHasOccurred.2301
 275 0066 8111      		cpse r24,__zero_reg__
 276 0068 00C0      		rjmp .L6
 232:main.c        **** 	{
 233:main.c        **** 		/* Toggle the LED if everything is okay so we know if an error occurs even if not
 234:main.c        **** 		using console IO. */
 235:main.c        **** 		vParTestToggleLED( mainCHECK_TASK_LED );
 278               	.LM13:
 279 006a 85E0      		ldi r24,lo8(5)
 280 006c 0E94 0000 		call vParTestToggleLED
 281 0070 00C0      		rjmp .L6
 282               	.LBE6:
 283               	.LBE7:
 288               	.Lscope1:
 290               		.stabd	78,0,0
 291               		.section	.rodata.str1.1,"aMS",@progbits,1
 292               	.LC0:
 293 0000 4368 6563 		.string	"Check"
 293      6B00 
 294               		.section	.text.startup,"ax",@progbits
 296               	.global	main
 298               	main:
 299               		.stabd	46,0,0
 157:main.c        **** 	prvIncrementResetCount();
 301               	.LM14:
 302               	.LFBB2:
 303 0000 EF92      		push r14
 304 0002 FF92      		push r15
 305 0004 0F93      		push r16
 306 0006 CF93      		push r28
 307 0008 DF93      		push r29
 308 000a 1F92      		push __zero_reg__
 309 000c CDB7      		in r28,__SP_L__
 310 000e DEB7      		in r29,__SP_H__
 311               	/* prologue: function */
 312               	/* frame size = 1 */
 313               	/* stack size = 6 */
 314               	.L__stack_usage = 6
 315               	.LBB10:
 316               	.LBB11:
 236:main.c        **** 	}
 237:main.c        **** }
 238:main.c        **** /*-----------------------------------------------------------*/
 239:main.c        **** 
 240:main.c        **** static void prvIncrementResetCount( void )
 241:main.c        **** {
 242:main.c        **** unsigned char ucCount;
 243:main.c        **** 
 244:main.c        **** 	eeprom_read_block( &ucCount, mainRESET_COUNT_ADDRESS, sizeof( ucCount ) );
 318               	.LM15:
 319 0010 41E0      		ldi r20,lo8(1)
 320 0012 50E0      		ldi r21,0
 321 0014 60E5      		ldi r22,lo8(80)
 322 0016 70E0      		ldi r23,0
 323 0018 CE01      		movw r24,r28
 324 001a 0196      		adiw r24,1
 325 001c 0E94 0000 		call eeprom_read_block
 245:main.c        **** 	ucCount++;
 327               	.LM16:
 328 0020 6981      		ldd r22,Y+1
 329 0022 6F5F      		subi r22,lo8(-(1))
 330 0024 6983      		std Y+1,r22
 246:main.c        **** 	eeprom_write_byte( mainRESET_COUNT_ADDRESS, ucCount );
 332               	.LM17:
 333 0026 80E5      		ldi r24,lo8(80)
 334 0028 90E0      		ldi r25,0
 335 002a 0E94 0000 		call eeprom_write_byte
 336               	.LBE11:
 337               	.LBE10:
 161:main.c        **** 
 339               	.LM18:
 340 002e 0E94 0000 		call vParTestInitialise
 164:main.c        **** 	vAltStartComTestTasks( mainCOM_TEST_PRIORITY, mainCOM_TEST_BAUD_RATE, mainCOM_TEST_LED );
 342               	.LM19:
 343 0032 80E0      		ldi r24,0
 344 0034 0E94 0000 		call vStartIntegerMathTasks
 165:main.c        **** 	vStartPolledQueueTasks( mainQUEUE_POLL_PRIORITY );
 346               	.LM20:
 347 0038 25E0      		ldi r18,lo8(5)
 348 003a 40E0      		ldi r20,0
 349 003c 56E9      		ldi r21,lo8(-106)
 350 003e 60E0      		ldi r22,0
 351 0040 70E0      		ldi r23,0
 352 0042 82E0      		ldi r24,lo8(2)
 353 0044 0E94 0000 		call vAltStartComTestTasks
 166:main.c        **** 	vStartRegTestTasks();
 355               	.LM21:
 356 0048 82E0      		ldi r24,lo8(2)
 357 004a 0E94 0000 		call vStartPolledQueueTasks
 167:main.c        **** 
 359               	.LM22:
 360 004e 0E94 0000 		call vStartRegTestTasks
 170:main.c        **** 
 362               	.LM23:
 363 0052 E12C      		mov r14,__zero_reg__
 364 0054 F12C      		mov r15,__zero_reg__
 365 0056 03E0      		ldi r16,lo8(3)
 366 0058 20E0      		ldi r18,0
 367 005a 30E0      		ldi r19,0
 368 005c 45E5      		ldi r20,lo8(85)
 369 005e 50E0      		ldi r21,0
 370 0060 60E0      		ldi r22,lo8(.LC0)
 371 0062 70E0      		ldi r23,hi8(.LC0)
 372 0064 80E0      		ldi r24,lo8(gs(vErrorChecks))
 373 0066 90E0      		ldi r25,hi8(gs(vErrorChecks))
 374 0068 0E94 0000 		call xTaskCreate
 173:main.c        **** 
 376               	.LM24:
 377 006c 83E0      		ldi r24,lo8(3)
 378 006e 0E94 0000 		call vStartFlashCoRoutines
 178:main.c        **** 
 380               	.LM25:
 381 0072 0E94 0000 		call vTaskStartScheduler
 181:main.c        **** /*-----------------------------------------------------------*/
 383               	.LM26:
 384 0076 80E0      		ldi r24,0
 385 0078 90E0      		ldi r25,0
 386               	/* epilogue start */
 387 007a 0F90      		pop __tmp_reg__
 388 007c DF91      		pop r29
 389 007e CF91      		pop r28
 390 0080 0F91      		pop r16
 391 0082 FF90      		pop r15
 392 0084 EF90      		pop r14
 393 0086 0895      		ret
 398               	.Lscope2:
 400               		.stabd	78,0,0
 401               		.text
 403               	.global	vApplicationIdleHook
 405               	vApplicationIdleHook:
 406               		.stabd	46,0,0
 247:main.c        **** }
 248:main.c        **** /*-----------------------------------------------------------*/
 249:main.c        **** 
 250:main.c        **** void vApplicationIdleHook( void )
 251:main.c        **** {
 408               	.LM27:
 409               	.LFBB3:
 410               	/* prologue: function */
 411               	/* frame size = 0 */
 412               	/* stack size = 0 */
 413               	.L__stack_usage = 0
 252:main.c        **** 	vCoRoutineSchedule();
 415               	.LM28:
 416 0072 0C94 0000 		jmp vCoRoutineSchedule
 418               	.Lscope3:
 420               		.stabd	78,0,0
 421               		.local	xErrorHasOccurred.2301
 422               		.comm	xErrorHasOccurred.2301,1,1
 423               		.data
 426               	ulDummyVariable.2296:
 427 0000 03        		.byte	3
 428 0001 00        		.byte	0
 429 0002 00        		.byte	0
 430 0003 00        		.byte	0
 431               		.text
 433               	.Letext0:
 434               		.ident	"GCC: (GNU) 4.9.2"
 435               	.global __do_copy_data
 436               	.global __do_clear_bss
DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/cc1J5r7R.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/cc1J5r7R.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/cc1J5r7R.s:4      *ABS*:000000000000003f __SREG__
     /tmp/cc1J5r7R.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/cc1J5r7R.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/cc1J5r7R.s:199    .text:0000000000000000 vErrorChecks
     /tmp/cc1J5r7R.s:426    .data:0000000000000000 ulDummyVariable.2296
                             .bss:0000000000000000 xErrorHasOccurred.2301
     /tmp/cc1J5r7R.s:298    .text.startup:0000000000000000 main
     /tmp/cc1J5r7R.s:405    .text:0000000000000072 vApplicationIdleHook

UNDEFINED SYMBOLS
vTaskDelay
__muluhisi3
xAreIntegerMathsTaskStillRunning
xAreComTestTasksStillRunning
xArePollingQueuesStillRunning
xAreRegTestTasksStillRunning
vParTestToggleLED
eeprom_read_block
eeprom_write_byte
vParTestInitialise
vStartIntegerMathTasks
vAltStartComTestTasks
vStartPolledQueueTasks
vStartRegTestTasks
xTaskCreate
vStartFlashCoRoutines
vTaskStartScheduler
vCoRoutineSchedule
__do_copy_data
__do_clear_bss
