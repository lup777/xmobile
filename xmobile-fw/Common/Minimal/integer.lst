   1               		.file	"integer.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   9               		.text
  10               	.Ltext0:
 180               	vCompeteingIntMathTask:
 181               		.stabd	46,0,0
   1:../Common/Minimal/integer.c **** /*
   2:../Common/Minimal/integer.c ****  * FreeRTOS Kernel V10.0.0
   3:../Common/Minimal/integer.c ****  * Copyright (C) 2017 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:../Common/Minimal/integer.c ****  *
   5:../Common/Minimal/integer.c ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:../Common/Minimal/integer.c ****  * this software and associated documentation files (the "Software"), to deal in
   7:../Common/Minimal/integer.c ****  * the Software without restriction, including without limitation the rights to
   8:../Common/Minimal/integer.c ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:../Common/Minimal/integer.c ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:../Common/Minimal/integer.c ****  * subject to the following conditions:
  11:../Common/Minimal/integer.c ****  *
  12:../Common/Minimal/integer.c ****  * The above copyright notice and this permission notice shall be included in all
  13:../Common/Minimal/integer.c ****  * copies or substantial portions of the Software. If you wish to use our Amazon
  14:../Common/Minimal/integer.c ****  * FreeRTOS name, please do so in a fair use way that does not cause confusion.
  15:../Common/Minimal/integer.c ****  *
  16:../Common/Minimal/integer.c ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  17:../Common/Minimal/integer.c ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  18:../Common/Minimal/integer.c ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  19:../Common/Minimal/integer.c ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  20:../Common/Minimal/integer.c ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  21:../Common/Minimal/integer.c ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  22:../Common/Minimal/integer.c ****  *
  23:../Common/Minimal/integer.c ****  * http://www.FreeRTOS.org
  24:../Common/Minimal/integer.c ****  * http://aws.amazon.com/freertos
  25:../Common/Minimal/integer.c ****  *
  26:../Common/Minimal/integer.c ****  * 1 tab == 4 spaces!
  27:../Common/Minimal/integer.c ****  */
  28:../Common/Minimal/integer.c **** 
  29:../Common/Minimal/integer.c **** /*
  30:../Common/Minimal/integer.c ****  * Creates one or more tasks that repeatedly perform a set of integer
  31:../Common/Minimal/integer.c ****  * calculations.  The result of each run-time calculation is compared to the
  32:../Common/Minimal/integer.c ****  * known expected result - with a mismatch being indicative of an error in the
  33:../Common/Minimal/integer.c ****  * context switch mechanism.
  34:../Common/Minimal/integer.c ****  */
  35:../Common/Minimal/integer.c **** 
  36:../Common/Minimal/integer.c **** #include <stdlib.h>
  37:../Common/Minimal/integer.c **** 
  38:../Common/Minimal/integer.c **** /* Scheduler include files. */
  39:../Common/Minimal/integer.c **** #include "FreeRTOS.h"
  40:../Common/Minimal/integer.c **** #include "task.h"
  41:../Common/Minimal/integer.c **** 
  42:../Common/Minimal/integer.c **** /* Demo program include files. */
  43:../Common/Minimal/integer.c **** #include "integer.h"
  44:../Common/Minimal/integer.c **** 
  45:../Common/Minimal/integer.c **** /* The constants used in the calculation. */
  46:../Common/Minimal/integer.c **** #define intgCONST1				( ( long ) 123 )
  47:../Common/Minimal/integer.c **** #define intgCONST2				( ( long ) 234567 )
  48:../Common/Minimal/integer.c **** #define intgCONST3				( ( long ) -3 )
  49:../Common/Minimal/integer.c **** #define intgCONST4				( ( long ) 7 )
  50:../Common/Minimal/integer.c **** #define intgEXPECTED_ANSWER		( ( ( intgCONST1 + intgCONST2 ) * intgCONST3 ) / intgCONST4 )
  51:../Common/Minimal/integer.c **** 
  52:../Common/Minimal/integer.c **** #define intgSTACK_SIZE			configMINIMAL_STACK_SIZE
  53:../Common/Minimal/integer.c **** 
  54:../Common/Minimal/integer.c **** /* As this is the minimal version, we will only create one task. */
  55:../Common/Minimal/integer.c **** #define intgNUMBER_OF_TASKS		( 1 )
  56:../Common/Minimal/integer.c **** 
  57:../Common/Minimal/integer.c **** /* The task function.  Repeatedly performs a 32 bit calculation, checking the
  58:../Common/Minimal/integer.c **** result against the expected result.  If the result is incorrect then the
  59:../Common/Minimal/integer.c **** context switch must have caused some corruption. */
  60:../Common/Minimal/integer.c **** static portTASK_FUNCTION_PROTO( vCompeteingIntMathTask, pvParameters );
  61:../Common/Minimal/integer.c **** 
  62:../Common/Minimal/integer.c **** /* Variables that are set to true within the calculation task to indicate
  63:../Common/Minimal/integer.c **** that the task is still executing.  The check task sets the variable back to
  64:../Common/Minimal/integer.c **** false, flagging an error if the variable is still false the next time it
  65:../Common/Minimal/integer.c **** is called. */
  66:../Common/Minimal/integer.c **** static BaseType_t xTaskCheck[ intgNUMBER_OF_TASKS ] = { ( BaseType_t ) pdFALSE };
  67:../Common/Minimal/integer.c **** 
  68:../Common/Minimal/integer.c **** /*-----------------------------------------------------------*/
  69:../Common/Minimal/integer.c **** 
  70:../Common/Minimal/integer.c **** void vStartIntegerMathTasks( UBaseType_t uxPriority )
  71:../Common/Minimal/integer.c **** {
  72:../Common/Minimal/integer.c **** short sTask;
  73:../Common/Minimal/integer.c **** 
  74:../Common/Minimal/integer.c **** 	for( sTask = 0; sTask < intgNUMBER_OF_TASKS; sTask++ )
  75:../Common/Minimal/integer.c **** 	{
  76:../Common/Minimal/integer.c **** 		xTaskCreate( vCompeteingIntMathTask, "IntMath", intgSTACK_SIZE, ( void * ) &( xTaskCheck[ sTask ]
  77:../Common/Minimal/integer.c **** 	}
  78:../Common/Minimal/integer.c **** }
  79:../Common/Minimal/integer.c **** /*-----------------------------------------------------------*/
  80:../Common/Minimal/integer.c **** 
  81:../Common/Minimal/integer.c **** static portTASK_FUNCTION( vCompeteingIntMathTask, pvParameters )
  82:../Common/Minimal/integer.c **** {
 183               	.LM0:
 184               	.LFBB1:
 185 0000 CF93      		push r28
 186 0002 DF93      		push r29
 187 0004 00D0      		rcall .
 188 0006 00D0      		rcall .
 189 0008 CDB7      		in r28,__SP_L__
 190 000a DEB7      		in r29,__SP_H__
 191               	/* prologue: function */
 192               	/* frame size = 4 */
 193               	/* stack size = 6 */
 194               	.L__stack_usage = 6
 195 000c 7C01      		movw r14,r24
  83:../Common/Minimal/integer.c **** /* These variables are all effectively set to constants so they are volatile to
  84:../Common/Minimal/integer.c **** ensure the compiler does not just get rid of them. */
  85:../Common/Minimal/integer.c **** volatile long lValue;
  86:../Common/Minimal/integer.c **** short sError = pdFALSE;
 197               	.LM1:
 198 000e 00E0      		ldi r16,0
 199 0010 10E0      		ldi r17,0
  87:../Common/Minimal/integer.c **** volatile BaseType_t *pxTaskHasExecuted;
  88:../Common/Minimal/integer.c **** 
  89:../Common/Minimal/integer.c **** 	/* Set a pointer to the variable we are going to set to true each
  90:../Common/Minimal/integer.c **** 	iteration.  This is also a good test of the parameter passing mechanism
  91:../Common/Minimal/integer.c **** 	within each port. */
  92:../Common/Minimal/integer.c **** 	pxTaskHasExecuted = ( volatile BaseType_t * ) pvParameters;
  93:../Common/Minimal/integer.c **** 
  94:../Common/Minimal/integer.c **** 	/* Keep performing a calculation and checking the result against a constant. */
  95:../Common/Minimal/integer.c **** 	for( ;; )
  96:../Common/Minimal/integer.c **** 	{
  97:../Common/Minimal/integer.c **** 		/* Perform the calculation.  This will store partial value in
  98:../Common/Minimal/integer.c **** 		registers, resulting in a good test of the context switch mechanism. */
  99:../Common/Minimal/integer.c **** 		lValue = intgCONST1;
 201               	.LM2:
 202 0012 8BE7      		ldi r24,lo8(123)
 203 0014 882E      		mov r8,r24
 204 0016 912C      		mov r9,__zero_reg__
 205 0018 A12C      		mov r10,__zero_reg__
 206 001a B12C      		mov r11,__zero_reg__
 100:../Common/Minimal/integer.c **** 		lValue += intgCONST2;
 101:../Common/Minimal/integer.c **** 
 102:../Common/Minimal/integer.c **** 		/* Yield in case cooperative scheduling is being used. */
 103:../Common/Minimal/integer.c **** 		#if configUSE_PREEMPTION == 0
 104:../Common/Minimal/integer.c **** 		{
 105:../Common/Minimal/integer.c **** 			taskYIELD();
 106:../Common/Minimal/integer.c **** 		}
 107:../Common/Minimal/integer.c **** 		#endif
 108:../Common/Minimal/integer.c **** 
 109:../Common/Minimal/integer.c **** 		/* Finish off the calculation. */
 110:../Common/Minimal/integer.c **** 		lValue *= intgCONST3;
 111:../Common/Minimal/integer.c **** 		lValue /= intgCONST4;
 208               	.LM3:
 209 001c 97E0      		ldi r25,lo8(7)
 210 001e 492E      		mov r4,r25
 211 0020 512C      		mov r5,__zero_reg__
 212 0022 612C      		mov r6,__zero_reg__
 213 0024 712C      		mov r7,__zero_reg__
 112:../Common/Minimal/integer.c **** 
 113:../Common/Minimal/integer.c **** 		/* If the calculation is found to be incorrect we stop setting the
 114:../Common/Minimal/integer.c **** 		TaskHasExecuted variable so the check task can see an error has
 115:../Common/Minimal/integer.c **** 		occurred. */
 116:../Common/Minimal/integer.c **** 		if( lValue != intgEXPECTED_ANSWER ) /*lint !e774 volatile used to prevent this being optimised ou
 117:../Common/Minimal/integer.c **** 		{
 118:../Common/Minimal/integer.c **** 			sError = pdTRUE;
 119:../Common/Minimal/integer.c **** 		}
 120:../Common/Minimal/integer.c **** 
 121:../Common/Minimal/integer.c **** 		if( sError == pdFALSE )
 122:../Common/Minimal/integer.c **** 		{
 123:../Common/Minimal/integer.c **** 			/* We have not encountered any errors, so set the flag that show
 124:../Common/Minimal/integer.c **** 			we are still executing.  This will be periodically cleared by
 125:../Common/Minimal/integer.c **** 			the check task. */
 126:../Common/Minimal/integer.c **** 			portENTER_CRITICAL();
 127:../Common/Minimal/integer.c **** 				*pxTaskHasExecuted = pdTRUE;
 215               	.LM4:
 216 0026 DD24      		clr r13
 217 0028 D394      		inc r13
 218               	.L2:
  99:../Common/Minimal/integer.c **** 		lValue += intgCONST2;
 220               	.LM5:
 221 002a 8982      		std Y+1,r8
 222 002c 9A82      		std Y+2,r9
 223 002e AB82      		std Y+3,r10
 224 0030 BC82      		std Y+4,r11
 100:../Common/Minimal/integer.c **** 		lValue += intgCONST2;
 226               	.LM6:
 227 0032 8981      		ldd r24,Y+1
 228 0034 9A81      		ldd r25,Y+2
 229 0036 AB81      		ldd r26,Y+3
 230 0038 BC81      		ldd r27,Y+4
 231 003a 895B      		subi r24,-71
 232 003c 9B46      		sbci r25,107
 233 003e AC4F      		sbci r26,-4
 234 0040 BF4F      		sbci r27,-1
 235 0042 8983      		std Y+1,r24
 236 0044 9A83      		std Y+2,r25
 237 0046 AB83      		std Y+3,r26
 238 0048 BC83      		std Y+4,r27
 110:../Common/Minimal/integer.c **** 		lValue /= intgCONST4;
 240               	.LM7:
 241 004a 2981      		ldd r18,Y+1
 242 004c 3A81      		ldd r19,Y+2
 243 004e 4B81      		ldd r20,Y+3
 244 0050 5C81      		ldd r21,Y+4
 245 0052 ADEF      		ldi r26,lo8(-3)
 246 0054 BFEF      		ldi r27,lo8(-1)
 247 0056 0E94 0000 		call __mulohisi3
 248 005a 6983      		std Y+1,r22
 249 005c 7A83      		std Y+2,r23
 250 005e 8B83      		std Y+3,r24
 251 0060 9C83      		std Y+4,r25
 111:../Common/Minimal/integer.c **** 
 253               	.LM8:
 254 0062 6981      		ldd r22,Y+1
 255 0064 7A81      		ldd r23,Y+2
 256 0066 8B81      		ldd r24,Y+3
 257 0068 9C81      		ldd r25,Y+4
 258 006a A301      		movw r20,r6
 259 006c 9201      		movw r18,r4
 260 006e 0E94 0000 		call __divmodsi4
 261 0072 2983      		std Y+1,r18
 262 0074 3A83      		std Y+2,r19
 263 0076 4B83      		std Y+3,r20
 264 0078 5C83      		std Y+4,r21
 116:../Common/Minimal/integer.c **** 		{
 266               	.LM9:
 267 007a 8981      		ldd r24,Y+1
 268 007c 9A81      		ldd r25,Y+2
 269 007e AB81      		ldd r26,Y+3
 270 0080 BC81      		ldd r27,Y+4
 271 0082 8B31      		cpi r24,27
 272 0084 9747      		sbci r25,119
 273 0086 AE4F      		sbci r26,-2
 274 0088 BF4F      		sbci r27,-1
 275 008a 01F0      		breq .L7
 276               	.L5:
 277 008c 01E0      		ldi r16,lo8(1)
 278 008e 10E0      		ldi r17,0
 279 0090 00C0      		rjmp .L2
 280               	.L7:
 121:../Common/Minimal/integer.c **** 		{
 282               	.LM10:
 283 0092 0115      		cp r16,__zero_reg__
 284 0094 1105      		cpc r17,__zero_reg__
 285 0096 01F4      		brne .L5
 126:../Common/Minimal/integer.c **** 				*pxTaskHasExecuted = pdTRUE;
 287               	.LM11:
 288               	/* #APP */
 289               	 ;  126 "../Common/Minimal/integer.c" 1
 290 0098 0FB6      		in		__tmp_reg__, __SREG__
 291               	 ;  0 "" 2
 292               	 ;  126 "../Common/Minimal/integer.c" 1
 293 009a F894      		cli
 294               	 ;  0 "" 2
 295               	 ;  126 "../Common/Minimal/integer.c" 1
 296 009c 0F92      		push	__tmp_reg__
 297               	 ;  0 "" 2
 299               	.LM12:
 300               	/* #NOAPP */
 301 009e F701      		movw r30,r14
 302 00a0 D082      		st Z,r13
 128:../Common/Minimal/integer.c **** 			portEXIT_CRITICAL();
 304               	.LM13:
 305               	/* #APP */
 306               	 ;  128 "../Common/Minimal/integer.c" 1
 307 00a2 0F90      		pop		__tmp_reg__
 308               	 ;  0 "" 2
 309               	 ;  128 "../Common/Minimal/integer.c" 1
 310 00a4 0FBE      		out		__SREG__, __tmp_reg__
 311               	 ;  0 "" 2
 312               	/* #NOAPP */
 313 00a6 00C0      		rjmp .L2
 319               	.Lscope1:
 321               		.stabd	78,0,0
 322               		.section	.rodata.str1.1,"aMS",@progbits,1
 323               	.LC0:
 324 0000 496E 744D 		.string	"IntMath"
 324      6174 6800 
 325               		.text
 328               	.global	vStartIntegerMathTasks
 330               	vStartIntegerMathTasks:
 331               		.stabd	46,0,0
  71:../Common/Minimal/integer.c **** short sTask;
 333               	.LM14:
 334               	.LFBB2:
 335 00a8 EF92      		push r14
 336 00aa FF92      		push r15
 337 00ac 0F93      		push r16
 338               	/* prologue: function */
 339               	/* frame size = 0 */
 340               	/* stack size = 3 */
 341               	.L__stack_usage = 3
  76:../Common/Minimal/integer.c **** 	}
 343               	.LM15:
 344 00ae E12C      		mov r14,__zero_reg__
 345 00b0 F12C      		mov r15,__zero_reg__
 346 00b2 082F      		mov r16,r24
 347 00b4 20E0      		ldi r18,lo8(xTaskCheck)
 348 00b6 30E0      		ldi r19,hi8(xTaskCheck)
 349 00b8 45E5      		ldi r20,lo8(85)
 350 00ba 50E0      		ldi r21,0
 351 00bc 60E0      		ldi r22,lo8(.LC0)
 352 00be 70E0      		ldi r23,hi8(.LC0)
 353 00c0 80E0      		ldi r24,lo8(gs(vCompeteingIntMathTask))
 354 00c2 90E0      		ldi r25,hi8(gs(vCompeteingIntMathTask))
 355 00c4 0E94 0000 		call xTaskCreate
 356               	/* epilogue start */
  78:../Common/Minimal/integer.c **** /*-----------------------------------------------------------*/
 358               	.LM16:
 359 00c8 0F91      		pop r16
 360 00ca FF90      		pop r15
 361 00cc EF90      		pop r14
 362 00ce 0895      		ret
 364               	.Lscope2:
 366               		.stabd	78,0,0
 368               	.global	xAreIntegerMathsTaskStillRunning
 370               	xAreIntegerMathsTaskStillRunning:
 371               		.stabd	46,0,0
 129:../Common/Minimal/integer.c **** 		}
 130:../Common/Minimal/integer.c **** 
 131:../Common/Minimal/integer.c **** 		/* Yield in case cooperative scheduling is being used. */
 132:../Common/Minimal/integer.c **** 		#if configUSE_PREEMPTION == 0
 133:../Common/Minimal/integer.c **** 		{
 134:../Common/Minimal/integer.c **** 			taskYIELD();
 135:../Common/Minimal/integer.c **** 		}
 136:../Common/Minimal/integer.c **** 		#endif
 137:../Common/Minimal/integer.c **** 	}
 138:../Common/Minimal/integer.c **** }
 139:../Common/Minimal/integer.c **** /*-----------------------------------------------------------*/
 140:../Common/Minimal/integer.c **** 
 141:../Common/Minimal/integer.c **** /* This is called to check that all the created tasks are still running. */
 142:../Common/Minimal/integer.c **** BaseType_t xAreIntegerMathsTaskStillRunning( void )
 143:../Common/Minimal/integer.c **** {
 373               	.LM17:
 374               	.LFBB3:
 375               	/* prologue: function */
 376               	/* frame size = 0 */
 377               	/* stack size = 0 */
 378               	.L__stack_usage = 0
 144:../Common/Minimal/integer.c **** BaseType_t xReturn = pdTRUE;
 145:../Common/Minimal/integer.c **** short sTask;
 146:../Common/Minimal/integer.c **** 
 147:../Common/Minimal/integer.c **** 	/* Check the maths tasks are still running by ensuring their check variables
 148:../Common/Minimal/integer.c **** 	are still being set to true. */
 149:../Common/Minimal/integer.c **** 	for( sTask = 0; sTask < intgNUMBER_OF_TASKS; sTask++ )
 150:../Common/Minimal/integer.c **** 	{
 151:../Common/Minimal/integer.c **** 		if( xTaskCheck[ sTask ] == pdFALSE )
 380               	.LM18:
 381 00d0 81E0      		ldi r24,lo8(1)
 382 00d2 9091 0000 		lds r25,xTaskCheck
 383 00d6 9111      		cpse r25,__zero_reg__
 384 00d8 00C0      		rjmp .L10
 385 00da 80E0      		ldi r24,0
 386               	.L10:
 152:../Common/Minimal/integer.c **** 		{
 153:../Common/Minimal/integer.c **** 			/* The check has not incremented so an error exists. */
 154:../Common/Minimal/integer.c **** 			xReturn = pdFALSE;
 155:../Common/Minimal/integer.c **** 		}
 156:../Common/Minimal/integer.c **** 
 157:../Common/Minimal/integer.c **** 		/* Reset the check variable so we can tell if it has been set by
 158:../Common/Minimal/integer.c **** 		the next time around. */
 159:../Common/Minimal/integer.c **** 		xTaskCheck[ sTask ] = pdFALSE;
 388               	.LM19:
 389 00dc 1092 0000 		sts xTaskCheck,__zero_reg__
 160:../Common/Minimal/integer.c **** 	}
 161:../Common/Minimal/integer.c **** 
 162:../Common/Minimal/integer.c **** 	return xReturn;
 163:../Common/Minimal/integer.c **** }
 391               	.LM20:
 392 00e0 0895      		ret
 394               	.Lscope3:
 396               		.stabd	78,0,0
 397               		.local	xTaskCheck
 398               		.comm	xTaskCheck,1,1
 401               	.Letext0:
 402               		.ident	"GCC: (GNU) 4.9.2"
 403               	.global __do_copy_data
 404               	.global __do_clear_bss
DEFINED SYMBOLS
                            *ABS*:0000000000000000 integer.c
     /tmp/ccH6imkx.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccH6imkx.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccH6imkx.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccH6imkx.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccH6imkx.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccH6imkx.s:180    .text:0000000000000000 vCompeteingIntMathTask
     /tmp/ccH6imkx.s:330    .text:00000000000000a8 vStartIntegerMathTasks
                             .bss:0000000000000000 xTaskCheck
     /tmp/ccH6imkx.s:370    .text:00000000000000d0 xAreIntegerMathsTaskStillRunning

UNDEFINED SYMBOLS
__mulohisi3
__divmodsi4
xTaskCreate
__do_copy_data
__do_clear_bss
